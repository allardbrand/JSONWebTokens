// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jsonwebtoken.actions;

import java.io.UnsupportedEncodingException;
import java.util.Map;
import java.util.Map.Entry;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.Claim;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import jsonwebtoken.helper.AlgorithmHelper;
import jsonwebtoken.proxies.ArrayValue;
import jsonwebtoken.proxies.Enum_ClaimValueType;
import jsonwebtoken.proxies.Token;

public class JA_DecodeToken extends CustomJavaAction<IMendixObject>
{
	private java.lang.String token;
	private java.lang.String secret;
	private jsonwebtoken.proxies.Enum_Algorithm algorithm;

	public JA_DecodeToken(IContext context, java.lang.String token, java.lang.String secret, java.lang.String algorithm)
	{
		super(context);
		this.token = token;
		this.secret = secret;
		this.algorithm = algorithm == null ? null : jsonwebtoken.proxies.Enum_Algorithm.valueOf(algorithm);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		Token newTokenObject = new Token(getContext());
		String logNode = jsonwebtoken.proxies.constants.Constants.getLogNode();
		
		// Check if algorithm has been provided
		if (this.algorithm == null) {
			Core.getLogger(logNode).warn("No valid algorithm has been provided");
			return null;
		}
		
		// Create token verifier
		try {
		    JWTVerifier verifier = JWT.require(AlgorithmHelper.Algorithm(this.algorithm, this.secret))
		        .build();
		    
		    // Verify token (raises exception if token is invalid)
		    DecodedJWT jwt = verifier.verify(this.token);
			
		    // Get and store expiration date
		    newTokenObject.setExpiresAt(jwt.getExpiresAt());
		    
		    // Get and store not valid before date
		    newTokenObject.setNotValidBefore(jwt.getNotBefore());
		    
		    // Get claims
		    Map<String, Claim> claims = jwt.getClaims();
		    
		    if (claims != null){
		    	
		    	// Iterate over available claims
			    for (Entry<String, Claim> claimEntry : claims.entrySet()) {
			    	Claim claim = claimEntry.getValue();			    	
			    	
			    	// If claim is available, store the claim into a new Claim object
			    	// and link it to the decoded token (both Mendix objects)
			    	if (claim != null && !claim.isNull()) {
			    		String claimKey = claimEntry.getKey();
			    		
			    		// Do not process the expiration date and not valid before as separate claims 
			    		// since they have already been processed as part of the token
			    		if (!"nbf".equals(claimKey) && !"exp".equals(claimKey)) {
			    			
			    			// Create new Claim object
				    		jsonwebtoken.proxies.Claim newClaimObject = new jsonwebtoken.proxies.Claim(getContext());
				    		newClaimObject.setClaim_Token(newTokenObject);
					    	newClaimObject.setName(claimEntry.getKey());
					    	
				    		// First try to process claim as string
				    		String stringResult = claim.asString();
				    						    		
				    		if (stringResult != null) {
				    			newClaimObject.setValueType(Enum_ClaimValueType.String);
				    			newClaimObject.setStringValue(stringResult);
				    		} else {
				    			// If result is null, the claim was not a string, try to
					    		// process the claim as an integer
				    			Integer intResult = claim.asInt();
				    			
				    			if (intResult != null) {
				    				// Convert integer to string value
				    				stringResult = intResult.toString();
				    				
				    				newClaimObject.setValueType(Enum_ClaimValueType.Integer);
				    				newClaimObject.setIntegerValue(intResult);
				    				
				    				// Store the integer as string value as well
				    				newClaimObject.setStringValue(stringResult);
				    			}
				    		}
				    		
				    		// If result is still null, the claim was not an integer 
				    		// either, try to process the claim as an array
				    		if (stringResult == null) {		    			
				    			try {
				    				String[] resultArray = claim.asArray(String.class);
					    			newClaimObject.setValueType(Enum_ClaimValueType.Array);
					    			
					    			// For each value in the result array, create an ArrayValue
					    			// object and add this to the newClaimObject
				    				for (String string : resultArray) {
				    					ArrayValue arrayValue = new ArrayValue(getContext());
				    					
				    					arrayValue.setValue(string);
				    					arrayValue.setArrayValue_Claim(newClaimObject);
									}
				    			} catch (Exception e) {
				    				Core.getLogger(logNode).warn("Could not decode claim " + claimKey + ": " + e.getMessage());
				    			}
				    		}
			    		}
			    	}
			    }
		    }		    
		} catch (IllegalArgumentException | UnsupportedEncodingException e) {
			Core.getLogger(logNode).warn("Could not create token verifier");
			throw e;
		} catch (JWTVerificationException e) {
			Core.getLogger(logNode).debug("Could not decode token: invalid token provided");
			
			// Token was invalid; re-throw the exception so that this can
			// be handled in an error handler within the microflow
			throw e;
		}
	    	    
	    return newTokenObject.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_DecodeToken";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
